#!/bin/sh

# private functions

# public functions

port_incplatform()
{
	# XXX verify it exists first
	. ${X_PORTBUILD_DIR}/scripts/cross_build.${X_PORTBUILD_PLATFORM}
}

port_incrules()
{
	# Verify the port config exists
	if [ ! -e "${X_PORTBUILD_DIR}/pkgs/${X_PORTBUILD_PORT}/rules" ]; then
		echo "ERROR: couldn't find ${X_PORTBUILD_DIR}/pkgs/${X_PORTBUILD_PORT}/rules"
		exit 1
	fi

	. ${X_PORTBUILD_DIR}/pkgs/${X_PORTBUILD_PORT}/rules
}

port_checksum()
{
	local X_PKGFILE="`basename ${PKGDISTFILE}`"
	local X_SIZE
	local X_CKSUM
	local X_CHECK=0

	if [ -n "${PKGDISTFILE_SIZE}" ]; then
		X_CHECK="$((X_CHECK + 1))"
		X_SIZE="`stat -f%z ${X_PACKAGE_DISTFILE_DIR}/${X_PKGFILE} || true`"

		if [ "${X_SIZE}" != "${PKGDISTFILE_SIZE}" ]; then
			echo "ERROR: ${X_PKGFILE} size is: ${X_SIZE}, expected to be: ${PKGDISTFILE_SIZE}"
			return 1
		fi
	fi

	if [ -n "${PKGDISTFILE_SUM_SHA256}" ]; then
		X_CHECK="$((X_CHECK + 2))"
		X_CKSUM="`sha256 -q ${X_PACKAGE_DISTFILE_DIR}/${X_PKGFILE} || true`"

		if [ "${X_CKSUM}" != "${PKGDISTFILE_SUM_SHA256}" ]; then
			echo "ERROR: checksum on ${X_PKGFILE} is incorrect."
			return 1
		fi
	fi
 
	if [ -n "${PKGDISTFILE_SUM_SHA512}" ]; then
		X_CHECK="$((X_CHECK + 4))"
 		X_CKSUM="`sha512 -q ${X_PACKAGE_DISTFILE_DIR}/${X_PKGFILE} || true`"

		if [ "${X_CKSUM}" != "${PKGDISTFILE_SUM_SHA512}" ]; then
			echo "ERROR: checksum on ${X_PKGFILE} is incorrect."
			return 1
		fi
	fi 
	
	if test "${X_CHECK}" -lt 1; then
		echo "WARNING: Ne check scheme has applied"
	else 
		echo "NOTICE: checksum on ${X_PKGFILE} is correct."
	fi
	return 0
}

port_fetch()
{

	if [ "x${PKGDISTFILE}" = "x" ]; then
		echo "ERROR: need PKGDISTFILE to fetch"
		exit 1
	fi

	# Check if the checksum matches
	port_checksum
	if [ $? = 0 ]; then
		echo "*** Skipping fetch; file exists and matches checksum"
		return 0
	fi

	# XXX TODO: eliminate the cd
	mkdir -p "${X_PACKAGE_DISTFILE_DIR}"
	( cd "${X_PACKAGE_DISTFILE_DIR}" && fetch ${PKGDISTFILE} )
}

port_clean()
{
	echo "Cleaning.."
	rm -rf "${X_PACKAGE_BUILDROOT_DIR}/${X_PORTBUILD_PORT}/work/"
}
port_unpack()
{
	local X_PKGFILE="`basename ${PKGDISTFILE}`"
	echo
	echo "Unpacking..."
	port_checksum
	if [ $? != 0 ]; then
		echo "ERROR: failed checksum!"
		return 1
	fi

	# mkdir -p "${X_PACKAGE_BUILDROOT_DIR}/${X_PORTBUILD_PORT}/work/"
	# ( cd "${X_PACKAGE_BUILDROOT_DIR}/${X_PORTBUILD_PORT}/work/" && tar zxvf ${X_PACKAGE_DISTFILE_DIR}/${X_PKGFILE} )

	local port="${X_PACKAGE_BUILDROOT_DIR}/${X_PORTBUILD_PORT}"
	local builder="${X_PORTBUILD_DIR}/pkgs/${X_PORTBUILD_PORT}"
	mkdir -p "${port}/work"
	(
		[ -w "${builder}" -a ! -e "${builder}/.port" ] && \
			ln -shf "${port}" "${builder}/.port"
		cd "${port}/work" && tar -xvf ${X_PACKAGE_DISTFILE_DIR}/${X_PKGFILE}
	)

}

port_patch()
{
	echo "Patching.."
	for i in ${PKG_PRE_BUILD_PATCHLIST}; do
		echo "*** ${i}"
		cd "${X_PACKAGE_BUILDROOT_DIR}/${X_PORTBUILD_PORT}/work/${PKGWORKSUBDIR}"
		patch -t -p0 < "${X_PORTBUILD_DIR}/pkgs/${X_PORTBUILD_PORT}/patches/${i}"
	done
}

port_configure()
{
	echo
	if [ "x${USE_CONFIGURE}" != "xYES" ]; then
		echo "Skipping configure; not needed"
		return
	fi
	echo "Running configure ${CONFIGURE_HOSTFLAGS}"

	cd "${X_PACKAGE_BUILDROOT_DIR}/${X_PORTBUILD_PORT}/work/${PKGWORKSUBDIR}"

	# making help, using set -C to not clobber
	# running under subshell to preserve current set
	(
		set -C
		./configure --help >> help
	)

	# # should then we make a symlink in port builder directory ?
	# test -r help && \
	# 	ln -sfh "${X_PACKAGE_BUILDROOT_DIR}/${X_PORTBUILD_PORT}/work/${PKGWORKSUBDIR}/help" \
	# 		"${X_PORTBUILD_DIR}/pkgs/${X_PORTBUILD_PORT}"
	#
	# just copy it, extracted port might already have useful help text
	test -e help && cp -v help "${X_PORTBUILD_DIR}/pkgs/${X_PORTBUILD_PORT}"
	
	# Setup the build environment
	env \
	    CC="${X_PKG_CC}" \
	    CXX="${X_PKG_CXX}" \
	    LD="${X_PKG_LD}" \
	    AR="${X_PKG_AR}" \
	    RANLIB="${X_PKG_RANLIB}" \
	    STRIP="${X_PKG_STRIP}" \
	    SYSROOT="${X_PKG_SYSROOT}" \
	    CFLAGS="${X_PKG_CFLAGS}" \
	    CXXFLAGS="${X_PKG_CXXFLAGS}" \
	    CPPFLAGS="${X_PKG_CPPFLAGS}" \
	    LDFLAGS="${X_PKG_LDFLAGS}" \
	    ./configure ${X_PKG_CONFIGURE_HOSTFLAGS} ${PKG_MAKE_CONFIGURE_FLAGS}

	# after configure patch/exec, but before started to build
	# the script to be executed *must* be a script with .sh extension
	# and can be listed without the trailing .sh
	[ -z  "${PKG_POST_CONFIGURE_SCRIPTS}" ] && return
	echo
	echo "Execute post configure shell script.."
	echo "PKG_POST_CONFIGURE_SCRIPTS = ${PKG_POST_CONFIGURE_SCRIPTS}"
	# read -p "PAUSED-1.." x
	port_exec_scripts ${PKG_POST_CONFIGURE_SCRIPTS} 
}

port_build()
{
	if istrue ${SKIP_BUILD}; then
		echo "Skip building package ${PKGNAME} ${PKGVERSION}"
		return
	fi

	echo
	echo "Building ${CONFIGURE_HOSTFLAGS}"

	cd "${X_PACKAGE_BUILDROOT_DIR}/${X_PORTBUILD_PORT}/work/${PKGWORKSUBDIR}"

	# For now, hard-code gmake. Later on we'll allow this to be
	# something other than gmake as appropriate.

	# Setup the build environment
	env \
	    CC="${X_PKG_CC}" \
	    CXX="${X_PKG_CXX}" \
	    LD="${X_PKG_LD}" \
	    AR="${X_PKG_AR}" \
	    RANLIB="${X_PKG_RANLIB}" \
	    STRIP="${X_PKG_STRIP}" \
	    SYSROOT="${X_PKG_SYSROOT}" \
	    CFLAGS="${X_PKG_CFLAGS}" \
	    CXXFLAGS="${X_PKG_CXXFLAGS}" \
	    CPPFLAGS="${X_PKG_CPPFLAGS}" \
	    LDFLAGS="${X_PKG_LDFLAGS}" \
	gmake ${PKG_MAKE_BUILD_FLAGS}

	# after build patch/exec, but before staging
	# the script to be executed *must* be a script with .sh extension
	# and can be listed without the trailing .sh
	[ -z  "${PKG_POST_BUILD_SCRIPTS}" ] && return
	echo
	echo "Execute post build shell script.."
	echo "PKG_POST_BUILD_SCRIPTS = ${PKG_POST_BUILD_SCRIPTS}"
	# read -p "PAUSED-1.." x
	port_exec_scripts ${PKG_POST_BUILD_SCRIPTS} 
}

port_staging()
{
	if istrue ${SKIP_BUILD}; then
		echo "Skip staging package ${PKGNAME} ${PKGVERSION}"
		return
	fi

	echo
	echo "Staging install.."

	# For now, this assumes DESTDIR is obeyed.
	# Obviously this isn't always going to be the case, but for
	# ./configure based bits it should work.
	mkdir -p "${X_PACKAGE_BUILDROOT_DIR}/${X_PORTBUILD_PORT}/staging/"
	cd "${X_PACKAGE_BUILDROOT_DIR}/${X_PORTBUILD_PORT}/work/${PKGWORKSUBDIR}/"
	env \
	    CC="${X_PKG_CC}" \
	    CXX="${X_PKG_CXX}" \
	    LD="${X_PKG_LD}" \
	    AR="${X_PKG_AR}" \
	    RANLIB="${X_PKG_RANLIB}" \
	    STRIP="${X_PKG_STRIP}" \
	    SYSROOT="${X_PKG_SYSROOT}" \
	    CFLAGS="${X_PKG_CFLAGS}" \
	    CXXFLAGS="${X_PKG_CXXFLAGS}" \
	    CPPFLAGS="${X_PKG_CPPFLAGS}" \
	    LDFLAGS="${X_PKG_LDFLAGS}" \
	gmake install ${PKG_INSTALL_BUILD_FLAGS} DESTDIR="${X_PACKAGE_BUILDROOT_DIR}/${X_PORTBUILD_PORT}/staging/"

	# post installation fixup
	# the script to be executed *must* be a script with .sh extension
	# and can be listed without the trailing .sh
	[ -z  "${PKG_POST_STAGING_SCRIPTS}" ] && return
	echo
	echo "Execute post staging shell script.."
	echo "PKG_POST_STAGING_SCRIPTS = ${PKG_POST_STAGING_SCRIPTS}"
	# read -p "PAUSED-1.." x
	port_exec_scripts ${PKG_POST_STAGING_SCRIPTS} 
}

port_files()
{
	if istrue ${SKIP_BUILD}; then
		echo "Skip local copy package ${PKGNAME} ${PKGVERSION}"
		return
	fi

	echo
	echo "Adding local files.."
	# If anything is in files/, then we copy it verbatim over into
	# the staging directory; so then the package step can bring them
	# in via the pkg-contents file.
	if [ ! -d "${X_PORTBUILD_DIR}/pkgs/${X_PORTBUILD_PORT}/files/" ]; then
		echo ".. no local files, skipping"
		return 0
	fi
	cp -vpr "${X_PORTBUILD_DIR}/pkgs/${X_PORTBUILD_PORT}/files/" "${X_PACKAGE_BUILDROOT_DIR}/${X_PORTBUILD_PORT}/staging/"
	echo ".. done."

	# post installation fixup
	# the script to be executed *must* be a script with .sh extension
	# and can be listed without the trailing .sh
	[ -z  "${PKG_POST_INSTALL_SCRIPTS}" ] && return
	echo
	echo "Execute post install shell script.."
	echo "PKG_POST_INSTALL_SCRIPTS = ${PKG_POST_INSTALL_SCRIPTS}"
	# read -p "PAUSED-1.." x
	port_exec_scripts ${PKG_POST_INSTALL_SCRIPTS} 
}

port_package()
{
	if istrue ${SKIP_BUILD}; then
		echo "Skip packaging package ${PKGNAME} ${PKGVERSION}"
		return
	fi

	echo
	echo "Creating package!"
	mkdir -p "${X_PACKAGE_PKGDIR}"
	cd "${X_PACKAGE_BUILDROOT_DIR}/${X_PORTBUILD_PORT}/staging/"

	local lib=usr/local/lib

	if isfalse "${X_PANCAKE_DONTSTRIP}"; then

	    # strip dynamic libraries (safe)
	    echo - stripping dynamic libraries..
	    istrue "${X_STRIPLIB_SO:-YES}" && \
		${X_PKG_STRIP} $lib/*.so > /dev/null 2>&1

	    # strip static libraries (safe)
	    echo - stripping static libraries..
	    istrue "${X_STRIPLIB_A:-YES}" && \
		${X_PKG_STRIP} --strip-unneeded $lib/*.a > /dev/null 2>&1;

	    # strip binaries (dirty)
	    echo - stripping binaries..
	    istrue "${X_STRIPBIN:-YES}" && \
		${X_PKG_STRIP} usr/local/bin/* usr/local/sbin/* > /dev/null 2>&1
	fi

	# create pkg-contents if it's not exist yet
	local pkg_contents="${X_PORTBUILD_DIR}/pkgs/${X_PORTBUILD_PORT}/pkg-contents" 
	if [ ! -f "$pkg_contents" ]; then
		local random="`get_random_md5`"
		port_get_pkg_contents . > "$pkg_contents.$random" 
		[ -s "$pkg_contents.$random" ]  \
			&& mv -fv "$pkg_contents.$random" "$pkg_contents" \
			|| rm -fv "$pkg_contents.$random"
	fi
 	
	tar zcpvf "${X_PACKAGE_PKGDIR}/${X_PORTBUILD_PORT}.tar.gz" "@${X_PORTBUILD_DIR}/pkgs/${X_PORTBUILD_PORT}/pkg-contents"
}

istrue()
{
	[ -n "$1" ] || return
	case "$1" in
		0|[Nn]|[Nn][Oo]|[Ff][Aa][Ll][Ss][Ee]|[Oo][Ff][Ff]) return 1;;
		1|[Yy]|[Yy][Ee][Ss]|[Tt][Rr][Uu][Ee]|[Oo][NnKK]) return 0;;
		*) return 2;; # undefined falls to false
	esac
}

isfalse() { ! istrue $@; }

get_cross_compile()
{
	local arch="$1"
	[ -n "$1" ] || arch=mips
	#
	# dynamically construct cross compiler, default to mips
	# if find more than one, get the last one
	# (suppose to be the fullset iden: host-os-bin)
	#
	local x
	for x in /usr/local/bin/${arch}-*-gcc; do :; done
	#
	if [ -x "$x" ]; then
		# cut the directory part, and chop the tail
		x="${x##*/}"
		#echo -n "${x%-gcc}"
		printf "${x%-gcc}"
	#
	# actually this kind of env *should* included the
	# trailing hyphen - (see https://busybox.net/FAQ.html#configure)
	# for this time we leave it the same behaviour as the previous one
	#
	else return 1; #echo "ERROR_NOTFOUND"
	fi
}

port_exec_scripts()
{
	for i; do
	# read -p "PAUSED-2.. $i" x
	# run .sh scripts
	# executed under subshell so any failures will not bring the function down
	# the script expected to set their return status 0:success 1:fail/error
	# the script will run in extracted port dir PKGWORKSUBDIR as stated in file: "rules"
		printf " executing $i.. "
		(
		cd "${X_PACKAGE_BUILDROOT_DIR}/${X_PORTBUILD_PORT}/work/${PKGWORKSUBDIR}"
		. "${X_PORTBUILD_DIR}/pkgs/${X_PORTBUILD_PORT}/patches/${i%.sh}.sh"
		) && echo done || echo error
	done
	# read -p "PAUSED-3.." x
}
